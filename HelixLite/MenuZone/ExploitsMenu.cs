using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using Exploits;
using MelonLoader;
using PatchZone;
using ReMod.Core.Managers;
using ReMod.Core.UI.QuickMenu;
using Resources.PatchZone;
using RootMotion.FinalIK;
using Toast;
using UnityEngine;
using UnityEngine.SceneManagement;
using Values;
using VRC;

namespace MenuZone
{
	// Token: 0x0200001A RID: 26
	[NullableContext(1)]
	[Nullable(0)]
	public static class ExploitsMenu
	{
		// Token: 0x06000077 RID: 119 RVA: 0x00005018 File Offset: 0x00003218
		public static void Create(Sprite MenuIcon, Sprite ButtonIcon, ref UiManager Manager)
		{
			UiManager helixLiteModule = MenuManager.HelixLiteModule;
			ExploitsMenu.Page = Manager.QMMenu.AddCategoryPage("l Exploits l", "", MenuIcon, "#ffffff");
			ExploitsMenu.Cat1 = ExploitsMenu.Page.AddCategory("Brrrrrr");
			ExploitsMenu.GhostButton = ExploitsMenu.Cat1.AddButton("<color=white>Serialize/Ghost", "Ghost Mode", delegate
			{
				Patch.GhostMode = !Patch.GhostMode;
				Patch.GhostDebug = Patch.GhostMode;
				if (Patch.GhostMode)
				{
					ExploitsMenu.GhostButton.Text = "<color=green>Serialize/Ghost</color>";
					GameObject gameObject = null;
					foreach (GameObject gameObject2 in SceneManager.GetActiveScene().GetRootGameObjects())
					{
						if (gameObject2.name.StartsWith("VRCPlayer[Local]"))
						{
							gameObject = gameObject2;
						}
					}
					ExploitsMenu.OrigGhostPos = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.1f, 0f);
					ExploitsMenu.OrigGhostRot = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.rotation;
					try
					{
						GameObject gameObject3 = Object.Instantiate<GameObject>(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCAvatarManager_0.field_Private_GameObject_0, null, true);
						Animator component = gameObject3.GetComponent<Animator>();
						if (component != null && component.isHuman)
						{
							Transform boneTransform = component.GetBoneTransform(10);
							if (boneTransform != null)
							{
								boneTransform.localScale = Vector3.one;
							}
						}
						gameObject3.name = "Cloned Avatar";
						component.enabled = false;
						gameObject3.GetComponent<VRIK>().enabled = false;
						gameObject3.transform.position = gameObject.transform.position;
						gameObject3.transform.rotation = gameObject.transform.rotation;
						ExploitsMenu.ClonedAvatar.Add(gameObject3);
						return;
					}
					catch
					{
						return;
					}
				}
				ExploitsMenu.GhostButton.Text = "<color=red>Serialize/Ghost</color>";
				foreach (GameObject gameObject4 in ExploitsMenu.ClonedAvatar)
				{
					Object.Destroy(gameObject4);
					Object.Destroy(gameObject4);
				}
			}, null, "#ffffff");
			ExploitsMenu.UdonNukeButton = ExploitsMenu.Cat1.AddButton("Udon Nuke", "Udon Nuke (Slightly slow but safer that most)", delegate
			{
				new Thread(new ThreadStart(UdonNuke.UdonGather))
				{
					IsBackground = true
				}.Start();
				UdonNuke.UdonGatherEvent.WaitOne();
				MelonCoroutines.Start(UdonNuke.sendudonnuke(UdonNuke.GetUdonObjects()));
			}, null, "#ffffff");
			ExploitsMenu.ExploitSelfHide = ExploitsMenu.Cat1.AddButton("<color=green>Self Hide</color>", "SelfHide", delegate
			{
				SelfHide.SelfHider();
				if (SelfHide.SelfHideState)
				{
					ExploitsMenu.ExploitSelfHide.Text = "<color=green>Self Hide</color>";
					return;
				}
				ExploitsMenu.ExploitSelfHide.Text = "<color=red>Self Hide</color>";
			}, null, "#ffffff");
			ExploitsMenu.EarRapeButton = ExploitsMenu.Cat1.AddButton("<color=white>EarRape</color>", "EarRape", delegate
			{
				EarRape.EarRapePro = !EarRape.EarRapePro;
				if (EarRape.EarRapePro)
				{
					ExploitsMenu.EarRapeButton.Text = "<color=green>EarRape</color>";
					MelonCoroutines.Start(EarRape.Start());
					ToastNotif.Toast("EarRape", "EarRape ON", null, 5f);
					return;
				}
				ExploitsMenu.EarRapeButton.Text = "<color=white>EarRape</color>";
				ToastNotif.Toast("EarRape", "EarRape OFF", null, 5f);
			}, null, "#ffffff");
			ExploitsMenu.autolewdbutton = ExploitsMenu.Cat1.AddButton("<color=white>AutoLewd</color>", "EarRape", delegate
			{
				ForceLewd.autolewd = !ForceLewd.autolewd;
				if (ForceLewd.autolewd)
				{
					ExploitsMenu.autolewdbutton.Text = "<color=green>AutoLewd</color>";
					using (List<Player>.Enumerator enumerator3 = others.GetAllPlayers().GetEnumerator())
					{
						while (enumerator3.MoveNext())
						{
							Player player = enumerator3.Current;
							try
							{
								ForceLewd.LewdPlayer(player._vrcplayer);
							}
							catch
							{
							}
						}
						return;
					}
				}
				ExploitsMenu.autolewdbutton.Text = "<color=white>AutoLewd</color>";
			}, null, "#ffffff");
			ExploitsMenu.Cat1.AddButton("<color=white>Attempt\nGodMode</color>", "<color=white>Attempt\nGodMode</color>", delegate
			{
				GodModeCheck.GodMode = !GodModeCheck.GodMode;
				ToastNotif.Toast("God Mode", "State: " + GodModeCheck.GodMode.ToString(), null, 3f);
			}, null, "#ffffff");
			ReMenuPage reMenuPage = ExploitsMenu.Cat1.AddMenuPage("| Mic Menu |", "", null, "#ffffff");
			reMenuPage.AddButton("Default Volume", null, delegate
			{
				USpeaker.field_Internal_Static_Single_1 = 1f;
			}, null, "#ffffff");
			reMenuPage.AddButton("Max Volume", null, delegate
			{
				USpeaker.field_Internal_Static_Single_1 = float.MaxValue;
			}, null, "#ffffff");
			reMenuPage.AddButton("Volume +", null, delegate
			{
				USpeaker.field_Internal_Static_Single_1 += 1f;
			}, null, "#ffffff");
			reMenuPage.AddButton("Volume -", null, delegate
			{
				USpeaker.field_Internal_Static_Single_1 -= 1f;
			}, null, "#ffffff");
		}

		// Token: 0x04000056 RID: 86
		public static ReMenuButton autolewdbutton;

		// Token: 0x04000057 RID: 87
		public static ReMenuButton NeonEspButton;

		// Token: 0x04000058 RID: 88
		public static ReMenuButton EspButton;

		// Token: 0x04000059 RID: 89
		public static ReMenuButton EarRapeButton;

		// Token: 0x0400005A RID: 90
		public static ReMenuButton ExploitSelfHide;

		// Token: 0x0400005B RID: 91
		public static ReMenuButton GhostButton;

		// Token: 0x0400005C RID: 92
		public static ReMenuButton UdonNukeButton;

		// Token: 0x0400005D RID: 93
		public static ReCategoryPage Page;

		// Token: 0x0400005E RID: 94
		public static ReMenuCategory Cat1;

		// Token: 0x0400005F RID: 95
		public static Vector3 OrigGhostPos;

		// Token: 0x04000060 RID: 96
		public static Quaternion OrigGhostRot;

		// Token: 0x04000061 RID: 97
		public static List<GameObject> ClonedAvatar = new List<GameObject>();
	}
}
