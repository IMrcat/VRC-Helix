using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using Il2CppSystem.Collections.Generic;
using MelonLoader;
using Toast;
using UnityEngine;
using VRC.SDKBase;
using VRC.Udon;

namespace Exploits
{
	// Token: 0x02000038 RID: 56
	[NullableContext(1)]
	[Nullable(0)]
	internal class UdonNuke
	{
		// Token: 0x060000F4 RID: 244 RVA: 0x000094AA File Offset: 0x000076AA
		public static IEnumerator sendudonnuke(UdonBehaviour[] names)
		{
			float startTime = Time.time;
			DateTime start = DateTime.Now;
			Dictionary<UdonBehaviour, List<string>> udonBehaviourEntries = new Dictionary<UdonBehaviour, List<string>>();
			foreach (UdonBehaviour udonBehaviour in names)
			{
				List<string> list = new List<string>();
				foreach (KeyValuePair<string, List<uint>> keyValuePair in udonBehaviour._eventTable)
				{
					if (!keyValuePair.Key.StartsWith("_"))
					{
						list.Add(keyValuePair.Key);
					}
				}
				if (list.Count > 0)
				{
					udonBehaviourEntries.Add(udonBehaviour, list);
				}
			}
			foreach (UdonBehaviour key in udonBehaviourEntries.Keys)
			{
				if (key != null)
				{
					foreach (string text in udonBehaviourEntries[key].OrderBy((string i) => i))
					{
						try
						{
							Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, key.gameObject);
							key.SendCustomNetworkEvent(0, text);
							goto IL_01B7;
						}
						catch (Exception)
						{
							MelonLogger.Msg("Failed sending Udon event: " + text);
							goto IL_01B7;
						}
						goto IL_019A;
						IL_01B7:
						if (Time.time >= startTime + 1E-06f)
						{
							startTime = Time.time;
							continue;
						}
						IL_019A:
						yield return null;
						goto IL_01B7;
					}
					IEnumerator<string> enumerator3 = null;
				}
				key = null;
			}
			Dictionary<UdonBehaviour, List<string>>.KeyCollection.Enumerator enumerator2 = default(Dictionary<UdonBehaviour, List<string>>.KeyCollection.Enumerator);
			ToastNotif.Toast("Udon Nuke Done", "Sent in " + (DateTime.Now - start).Seconds.ToString() + " S", null, 5f);
			yield break;
			yield break;
		}

		// Token: 0x060000F5 RID: 245 RVA: 0x000094BC File Offset: 0x000076BC
		public static void UdonGather()
		{
			UdonNuke.udonObjects = null;
			ManualResetEvent udonGatherEvent = UdonNuke.UdonGatherEvent;
			lock (udonGatherEvent)
			{
				UdonNuke.udonObjects = Resources.FindObjectsOfTypeAll<UdonBehaviour>();
				UdonNuke.UdonGatherEvent.Set();
			}
		}

		// Token: 0x060000F6 RID: 246 RVA: 0x00009518 File Offset: 0x00007718
		public static UdonBehaviour[] GetUdonObjects()
		{
			ManualResetEvent udonGatherEvent = UdonNuke.UdonGatherEvent;
			UdonBehaviour[] array;
			lock (udonGatherEvent)
			{
				UdonNuke.UdonGatherEvent.WaitOne();
				array = UdonNuke.udonObjects;
			}
			return array;
		}

		// Token: 0x040000E7 RID: 231
		public static ManualResetEvent UdonGatherEvent = new ManualResetEvent(false);

		// Token: 0x040000E8 RID: 232
		private static UdonBehaviour[] udonObjects;
	}
}
