using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using MelonLoader;
using MenuZone;
using UnityEngine;
using Values;
using VRC;
using VRC.Udon;

namespace Exploits
{
	// Token: 0x02000036 RID: 54
	[NullableContext(1)]
	[Nullable(0)]
	internal class TestPilots
	{
		// Token: 0x060000E7 RID: 231 RVA: 0x00008ADC File Offset: 0x00006CDC
		public static void FirstJoinLoad()
		{
			TestPilots.JoinedSacc = false;
			bool flag = false;
			MelonLogger.Msg("Looking For Your Sacc :3");
			if (TestPilots.PlaneUdonBehaviours != null && TestPilots.PlaneUdonBehaviours.Count != 0)
			{
				TestPilots.PlaneUdonBehaviours = (from udon in Resources.FindObjectsOfTypeAll<UdonBehaviour>()
					where udon != null && udon._eventTable != null && udon._eventTable.ContainsKey("PilotEnterVehicleLocal") && udon._eventTable.ContainsKey("__0_PilotEnterVehicleGlobal")
					select udon).ToArray<UdonBehaviour>().ToList<UdonBehaviour>();
				if (TestPilots.PlaneUdonBehaviours.Count == 0)
				{
					goto IL_0185;
				}
				MelonLogger.Msg("Loaded Vehicles!");
				flag = true;
				using (List<UdonBehaviour>.Enumerator enumerator = TestPilots.PlaneUdonBehaviours.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						UdonBehaviour udonBehaviour = enumerator.Current;
						if (udonBehaviour != null && udonBehaviour.gameObject != null)
						{
							MelonLogger.Msg(udonBehaviour.gameObject.name);
						}
					}
					goto IL_0185;
				}
			}
			TestPilots.PlaneUdonBehaviours = new List<UdonBehaviour>();
			TestPilots.PlaneUdonBehaviours = (from udon in Resources.FindObjectsOfTypeAll<UdonBehaviour>()
				where udon != null && udon._eventTable != null && udon._eventTable.ContainsKey("PilotEnterVehicleLocal") && udon._eventTable.ContainsKey("__0_PilotEnterVehicleGlobal")
				select udon).ToArray<UdonBehaviour>().ToList<UdonBehaviour>();
			if (TestPilots.PlaneUdonBehaviours.Count != 0)
			{
				MelonLogger.Msg("Loaded Vehicles!");
				flag = true;
				foreach (UdonBehaviour udonBehaviour2 in TestPilots.PlaneUdonBehaviours)
				{
					if (udonBehaviour2 != null && udonBehaviour2.gameObject != null)
					{
						MelonLogger.Msg(udonBehaviour2.gameObject.name);
					}
				}
			}
			IL_0185:
			if (flag)
			{
				TestPilots.JoinedSacc = true;
				TestPilotsMenu.TestPilots.AddCategory("Helix Sac Teleport (" + TestPilots.CatPageNumb.ToString() + ")");
				TestPilotsMenu.TeleportPilotCat.Active = false;
				TestPilotsMenu.TeleportPilotCat = TestPilotsMenu.TestPilots.GetCategory("Helix Sac Teleport (" + TestPilots.CatPageNumb.ToString() + ")");
				TestPilotsMenu.TeleportPilotCat.AddButton("Teleport All ", "TeleportAll innit bruv", delegate
				{
					MelonCoroutines.Start(TestPilots.TeleportAll());
				}, null, "#ffffff");
				using (List<UdonBehaviour>.Enumerator enumerator = TestPilots.PlaneUdonBehaviours.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						UdonBehaviour x2 = enumerator.Current;
						TestPilotsMenu.TeleportPilotCat.AddButton(x2.gameObject.name, "Teleport innit bruv", delegate
						{
							TestPilots.TeleportAndTakeOwnership(x2.gameObject, VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 1.3f, 0f));
						}, null, "#ffffff");
					}
				}
				TestPilotsMenu.TestPilots.AddCategory("Helix Sac Destroy (" + TestPilots.CatPageNumb.ToString() + ")");
				TestPilotsMenu.DestroyCat.Active = false;
				TestPilotsMenu.DestroyCat = TestPilotsMenu.TestPilots.GetCategory("Helix Sac Destroy (" + TestPilots.CatPageNumb.ToString() + ")");
				TestPilotsMenu.DestroyCat.AddButton("DestroyAll " + TestPilots.CatPageNumb.ToString(), "Destroy innit bruv", delegate
				{
					foreach (UdonBehaviour udonBehaviour3 in TestPilots.PlaneUdonBehaviours)
					{
						MelonCoroutines.Start(TestPilots.DestroyVehicle(udonBehaviour3.gameObject));
					}
				}, null, "#ffffff");
				using (List<UdonBehaviour>.Enumerator enumerator = TestPilots.PlaneUdonBehaviours.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						UdonBehaviour x = enumerator.Current;
						TestPilotsMenu.DestroyCat.AddButton(x.gameObject.name, "Destroy innit bruv", delegate
						{
							MelonCoroutines.Start(TestPilots.DestroyVehicle(x.gameObject));
						}, null, "#ffffff");
					}
				}
				TestPilots.CatPageNumb++;
			}
		}

		// Token: 0x060000E8 RID: 232 RVA: 0x00008ECC File Offset: 0x000070CC
		public static IEnumerator TeleportAll()
		{
			float startTime = Time.time;
			int xx = 8;
			foreach (UdonBehaviour udonBehaviour in TestPilots.PlaneUdonBehaviours)
			{
				TestPilots.TeleportAndTakeOwnership(udonBehaviour.gameObject, VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, (float)xx, 0f));
				int num = xx;
				xx = num + 1;
				num = xx;
				xx = num + 1;
				while (Time.time < startTime + 0.5f)
				{
					yield return null;
				}
				startTime = Time.time;
			}
			List<UdonBehaviour>.Enumerator enumerator = default(List<UdonBehaviour>.Enumerator);
			yield break;
			yield break;
		}

		// Token: 0x060000E9 RID: 233 RVA: 0x00008ED4 File Offset: 0x000070D4
		public static IEnumerator TeleportAllAndDestroy()
		{
			float startTime = Time.time;
			foreach (Player players in others.GetAllPlayers())
			{
				if (players.field_Private_VRCPlayerApi_0.displayName != VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0.displayName)
				{
					GameObject gameObject = TestPilots.FindClosestGameObject(players.transform.position);
					if (gameObject != null)
					{
						gameObject.transform.position = new Vector3(0f, 999800f, 0f);
						UdonBehaviour component = gameObject.GetComponent<UdonBehaviour>();
						if (component != null)
						{
							component.SendCustomEvent("PilotEnterVehicleLocal");
						}
						gameObject.transform.position = new Vector3(0f, 999800f, 0f);
						while (Time.time < startTime + 0.1f)
						{
							yield return null;
						}
						startTime = Time.time;
						MelonCoroutines.Start(TestPilots.DestroyVehicle(TestPilots.FindClosestGameObject(players.transform.position)));
						while (Time.time < startTime + 0.4f)
						{
							yield return null;
						}
						startTime = Time.time;
					}
				}
				while (Time.time < startTime + 0.01f)
				{
					yield return null;
				}
				startTime = Time.time;
				players = null;
			}
			List<Player>.Enumerator enumerator = default(List<Player>.Enumerator);
			yield break;
			yield break;
		}

		// Token: 0x060000EA RID: 234 RVA: 0x00008EDC File Offset: 0x000070DC
		public static IEnumerator ResupplyLoop()
		{
			float startTime = Time.time;
			float othertime = Time.time;
			while (TestPilots.ResupplyBool)
			{
				if (Time.time - othertime >= 5f)
				{
					VRCPlayer field_Internal_Static_VRCPlayer_ = VRCPlayer.field_Internal_Static_VRCPlayer_0;
					if (field_Internal_Static_VRCPlayer_ != null)
					{
						GameObject gameObject = TestPilots.FindClosestGameObject(field_Internal_Static_VRCPlayer_.transform.position);
						if (gameObject != null)
						{
							Transform transform = gameObject.transform.Find("SaccAirVehicle");
							if (transform != null)
							{
								TestPilots.LastEnteredPlane = transform.gameObject;
							}
						}
						othertime = Time.time;
						MelonLogger.Msg(field_Internal_Static_VRCPlayer_.transform.position);
					}
				}
				if (TestPilots.LastEnteredPlane != null)
				{
					MelonLogger.Msg("Sending Repairs to " + TestPilots.LastEnteredPlane.name);
					int num;
					for (int i = 0; i != 15; i = num + 1)
					{
						UdonBehaviour component = TestPilots.LastEnteredPlane.GetComponent<UdonBehaviour>();
						if (component != null)
						{
							component.SendCustomEvent("ReSupply");
							component.SendCustomEvent("ReSupply");
						}
						while (Time.time < startTime + 0.01f)
						{
							yield return null;
						}
						startTime = Time.time;
						num = i;
					}
				}
				else
				{
					MelonLogger.Msg("Plane Not Exist");
				}
				while (Time.time < startTime + 0.02f)
				{
					yield return null;
				}
				startTime = Time.time;
			}
			yield break;
		}

		// Token: 0x060000EB RID: 235 RVA: 0x00008EE4 File Offset: 0x000070E4
		public static IEnumerator DestroyVehicle(GameObject Object)
		{
			float startTime = Time.time;
			while (Time.time < startTime + 0.1f)
			{
				yield return null;
			}
			startTime = Time.time;
			int i = 0;
			while (i != TestPilots.Amounttosend)
			{
				try
				{
					Object.GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "BulletDamage1024x");
				}
				catch
				{
				}
				try
				{
					Object.GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "BulletDamageAmounttosend192x");
					goto IL_00BC;
				}
				catch
				{
					goto IL_00BC;
				}
				goto IL_00A5;
				IL_00BC:
				if (Time.time >= startTime + 0.005f)
				{
					startTime = Time.time;
					int num = i;
					i = num + 1;
					continue;
				}
				IL_00A5:
				yield return null;
				goto IL_00BC;
			}
			yield break;
		}

		// Token: 0x060000EC RID: 236 RVA: 0x00008EF4 File Offset: 0x000070F4
		public static void TeleportAndTakeOwnership(GameObject gameObject, Vector3 position)
		{
			if (gameObject != null)
			{
				UdonBehaviour component = gameObject.GetComponent<UdonBehaviour>();
				if (component != null)
				{
					component.SendCustomEvent("PilotEnterVehicleLocal");
					component.SendCustomEvent("PilotEnterVehicleLocal");
					component.SendCustomNetworkEvent(0, "ExitStation");
					component.SendCustomNetworkEvent(0, "ExitVehicleCheck");
				}
				gameObject.transform.position = position;
			}
		}

		// Token: 0x060000ED RID: 237 RVA: 0x00008F54 File Offset: 0x00007154
		public static GameObject FindClosestGameObject(Vector3 targetPosition)
		{
			GameObject gameObject = null;
			float num = float.MaxValue;
			float num2 = 45f;
			foreach (UdonBehaviour udonBehaviour in TestPilots.PlaneUdonBehaviours)
			{
				GameObject gameObject2 = udonBehaviour.gameObject;
				if (gameObject2 != null)
				{
					float num3 = Vector3.Distance(targetPosition, gameObject2.transform.position);
					if (num3 < num)
					{
						num = num3;
						gameObject = gameObject2;
					}
				}
			}
			if (gameObject != null && num <= num2)
			{
				MelonLogger.Msg(string.Format("Closest GameObject is {0} at a distance of {1}", gameObject.name, num));
				return gameObject;
			}
			MelonLogger.Msg("No GameObject found within 15 units.");
			return null;
		}

		// Token: 0x040000D5 RID: 213
		public static GameObject LastEnteredPlane;

		// Token: 0x040000D6 RID: 214
		public static bool ResupplyBool = false;

		// Token: 0x040000D7 RID: 215
		public static int Amounttosend = 14;

		// Token: 0x040000D8 RID: 216
		public static List<UdonBehaviour> PlaneUdonBehaviours;

		// Token: 0x040000D9 RID: 217
		public static bool JoinedSacc = false;

		// Token: 0x040000DA RID: 218
		private static int CatPageNumb = 0;
	}
}
