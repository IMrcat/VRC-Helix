using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using Il2CppSystem.Collections.Generic;
using MelonLoader;
using ReMod.Core.Managers;
using ReMod.Core.UI.QuickMenu;
using UnityEngine;
using Values;
using VRC.SDKBase;
using VRC.Udon;

namespace Exploits
{
	// Token: 0x02000037 RID: 55
	[NullableContext(1)]
	[Nullable(0)]
	internal class UdonIndex
	{
		// Token: 0x060000F0 RID: 240 RVA: 0x00009038 File Offset: 0x00007238
		public static void MakeMenu(ref UiManager MainPage)
		{
			UdonIndex.MainPageIndex = MainPage.QMMenu.AddMenuPage("UdonIndexer", "Udon Indexer", null, "#ffffff");
			UdonIndex.Filter1 = UdonIndex.MainPageIndex.AddButton("<color=green>Filter: A-Z</color>", "Filter1", delegate
			{
				UdonIndex.OrderDistance = !UdonIndex.OrderDistance;
				if (UdonIndex.OrderDistance)
				{
					UdonIndex.Filter1.Text = "<color=green>Filter: Distance</color>";
				}
				else
				{
					UdonIndex.Filter1.Text = "<color=green>Filter: A-Z</color>";
				}
				UdonIndex.LoadUdon();
			}, null, "#ffffff");
			UdonIndex.MainPageIndex.AddSpacer(null);
			UdonIndex.ReloadIndex = UdonIndex.MainPageIndex.AddButton("Reload", "Reload After Changing filters or loading new worlds", delegate
			{
				UdonIndex.LoadUdon();
			}, null, "#ffffff");
			UdonIndex.IndexPage = UdonIndex.MainPageIndex.AddCategoryPage("U-Indexer", "The Index Zone", null, "#ffffff");
			UdonIndex.IndexPage2 = UdonIndex.IndexPage.AddCategory("Prev Udon Object Clicked").AddCategoryPage("Prev Udon Obj", "", null, "#ffffff");
		}

		// Token: 0x060000F1 RID: 241 RVA: 0x00009138 File Offset: 0x00007338
		public static void LoadUdon()
		{
			new Thread(new ThreadStart(GatherUdon.UdonGather))
			{
				IsBackground = true
			}.Start();
			GatherUdon.UdonGatherEvent.WaitOne();
			UdonBehaviour[] udonObjects = GatherUdon.GetUdonObjects();
			if (UdonIndex.Catagory1 != null)
			{
				UdonIndex.Catagory1.Active = false;
			}
			UdonIndex.IndexPage.AddCategory("|UdonIndexer| (" + UdonIndex.catvalue.ToString() + ")");
			UdonIndex.Catagory1 = UdonIndex.IndexPage.GetCategory("|UdonIndexer| (" + UdonIndex.catvalue.ToString() + ")");
			UdonIndex.catvalue++;
			int num = 0;
			Dictionary<string, UdonBehaviour> dictionary = new Dictionary<string, UdonBehaviour>();
			UdonBehaviour[] array = udonObjects;
			int i;
			for (i = 0; i < array.Length; i++)
			{
				UdonBehaviour udonBehaviour2 = array[i];
				if (!(udonBehaviour2 == null) && !(udonBehaviour2.gameObject == null))
				{
					try
					{
						bool flag = true;
						string text = udonBehaviour2.gameObject.name;
						if (string.IsNullOrEmpty(text))
						{
							text = "Object " + num.ToString();
							num++;
						}
						else if (dictionary.Keys.Contains(text))
						{
							int num2 = 0;
							while (flag)
							{
								string text2 = text + num2.ToString();
								num2++;
								if (!dictionary.Keys.Contains(text2))
								{
									text = text2;
									flag = false;
								}
							}
						}
						dictionary.Add(text, udonBehaviour2);
					}
					catch
					{
					}
				}
			}
			Dictionary<UdonBehaviour, List<string>> udonBehaviourEntries = new Dictionary<UdonBehaviour, List<string>>();
			IEnumerable<KeyValuePair<string, UdonBehaviour>> enumerable;
			if (UdonIndex.OrderDistance)
			{
				try
				{
					enumerable = dictionary.OrderBy((KeyValuePair<string, UdonBehaviour> names) => Vector3.Distance(names.Value.transform.position, VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position)).ToArray<KeyValuePair<string, UdonBehaviour>>();
					goto IL_0209;
				}
				catch (Exception ex)
				{
					MelonLogger.Msg(ex);
					enumerable = dictionary.OrderBy((KeyValuePair<string, UdonBehaviour> kv) => kv.Key).ToList<KeyValuePair<string, UdonBehaviour>>();
					goto IL_0209;
				}
			}
			enumerable = dictionary.OrderBy((KeyValuePair<string, UdonBehaviour> kv) => kv.Key).ToList<KeyValuePair<string, UdonBehaviour>>();
			IL_0209:
			foreach (KeyValuePair<string, UdonBehaviour> keyValuePair in enumerable)
			{
				UdonBehaviour value = keyValuePair.Value;
				if (value._eventTable != null)
				{
					List<string> list = new List<string>();
					foreach (KeyValuePair<string, List<uint>> keyValuePair2 in value._eventTable)
					{
						list.Add(keyValuePair2.Key);
					}
					udonBehaviourEntries.Add(value, list);
				}
			}
			using (IEnumerator<KeyValuePair<string, UdonBehaviour>> enumerator = enumerable.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					KeyValuePair<string, UdonBehaviour> kvp = enumerator.Current;
					string key = kvp.Key;
					UdonBehaviour udonBehaviour = kvp.Value;
					ReMenuCategory objectPage;
					UdonIndex.Catagory1.AddButton(key, key, delegate
					{
						if (UdonIndex.IndexPage2 != null)
						{
							UdonIndex.IndexPage2.Active = false;
						}
						if (UdonIndex.category2 != null)
						{
							UdonIndex.category2.Active = false;
						}
						UdonIndex.IndexPage2.AddCategory("|Udon Indexer| (" + UdonIndex.catvalue2.ToString() + ")");
						UdonIndex.category2 = UdonIndex.IndexPage2.GetCategory("|Udon Indexer| (" + UdonIndex.catvalue2.ToString() + ")");
						objectPage = UdonIndex.category2;
						UdonIndex.catvalue2++;
						if (udonBehaviourEntries.ContainsKey(udonBehaviour))
						{
							using (IEnumerator<string> enumerator3 = udonBehaviourEntries[udonBehaviour].OrderBy((string i) => i).GetEnumerator())
							{
								while (enumerator3.MoveNext())
								{
									string eventName = enumerator3.Current;
									if (UdonIndex.OrderDistance)
									{
										objectPage.AddButton(eventName + Vector3.Distance(VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position, kvp.Value.transform.position).ToString(), eventName, delegate
										{
											if (!eventName.StartsWith("_"))
											{
												try
												{
													Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, udonBehaviour.gameObject);
													udonBehaviour.SendCustomNetworkEvent(0, eventName);
												}
												catch (Exception)
												{
													MelonLogger.Msg("Failed sending Udon event: " + eventName);
												}
											}
										}, null, "#ffffff");
									}
									else
									{
										objectPage.AddButton(eventName, eventName, delegate
										{
											if (!eventName.StartsWith("_"))
											{
												try
												{
													Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, udonBehaviour.gameObject);
													udonBehaviour.SendCustomNetworkEvent(0, eventName);
												}
												catch (Exception)
												{
													MelonLogger.Msg("Failed sending Udon event: " + eventName);
												}
											}
										}, null, "#ffffff");
									}
								}
							}
						}
						UdonIndex.IndexPage2.Open();
					}, null, "#ffffff");
				}
			}
		}

		// Token: 0x040000DB RID: 219
		private static ReMenuButton Filter1;

		// Token: 0x040000DC RID: 220
		private static ReMenuButton Filter2;

		// Token: 0x040000DD RID: 221
		private static ReMenuButton ReloadIndex;

		// Token: 0x040000DE RID: 222
		private static ReMenuPage MainPageIndex;

		// Token: 0x040000DF RID: 223
		private static ReCategoryPage IndexPage;

		// Token: 0x040000E0 RID: 224
		private static ReCategoryPage IndexPage2;

		// Token: 0x040000E1 RID: 225
		private static ReMenuCategory Catagory1;

		// Token: 0x040000E2 RID: 226
		private static ReMenuCategory category2;

		// Token: 0x040000E3 RID: 227
		public static bool FirstLoad = true;

		// Token: 0x040000E4 RID: 228
		private static bool OrderDistance = false;

		// Token: 0x040000E5 RID: 229
		private static int catvalue = 0;

		// Token: 0x040000E6 RID: 230
		private static int catvalue2 = 0;
	}
}
