using System;
using System.Linq;
using System.Runtime.CompilerServices;
using MelonLoader;
using ReMod.Core.UI.QuickMenu;
using UnityEngine;
using VRC.SDKBase;

namespace Exploits
{
	// Token: 0x02000031 RID: 49
	[NullableContext(1)]
	[Nullable(0)]
	internal class ItemIndex
	{
		// Token: 0x060000D4 RID: 212 RVA: 0x00007DE8 File Offset: 0x00005FE8
		public static void MakeMenu(ref ReMenuCategory MainPage)
		{
			ItemIndex.MainPageIndex = MainPage.AddMenuPage("ItemsIndex", "Items Index", null, "#ffffff");
			ItemIndex.Filter1 = ItemIndex.MainPageIndex.AddButton("<color=green>Filters: A-Z</color>", "Filter1", delegate
			{
				ItemIndex.OrderDistance = !ItemIndex.OrderDistance;
				if (ItemIndex.OrderDistance)
				{
					ItemIndex.Filter1.Text = "<color=green>Filters: Distance</color>";
				}
				else
				{
					ItemIndex.Filter1.Text = "<color=green>Filters: A-Z</color>";
				}
				ItemIndex.LoadItems();
			}, null, "#ffffff");
			ItemIndex.MainPageIndex.AddSpacer(null);
			ItemIndex.ReloadIndex = ItemIndex.MainPageIndex.AddButton("Reload Index", "Reload After Changing filters or loading new worlds", delegate
			{
				ItemIndex.LoadItems();
			}, null, "#ffffff");
			ItemIndex.IndexPage = ItemIndex.MainPageIndex.AddCategoryPage("Index Page", "The Index Zone", null, "#ffffff");
			ItemIndex.IndexPage2 = ItemIndex.IndexPage.AddCategory("Previous Object Clicked").AddCategoryPage("Previous Object", "", null, "#ffffff");
		}

		// Token: 0x060000D5 RID: 213 RVA: 0x00007EE4 File Offset: 0x000060E4
		public static void LoadItems()
		{
			if (ItemIndex.Catagory1 != null)
			{
				ItemIndex.Catagory1.Active = false;
			}
			ItemIndex.IndexPage.AddCategory("|ItemIndex| (" + ItemIndex.catvalue.ToString() + ")");
			ItemIndex.Catagory1 = ItemIndex.IndexPage.GetCategory("|ItemIndex| (" + ItemIndex.catvalue.ToString() + ")");
			ItemIndex.catvalue++;
			VRC_Pickup[] array = GeneralPickups.getpickups();
			if (ItemIndex.OrderDistance)
			{
				try
				{
					array = array.OrderBy((VRC_Pickup pickup) => Vector3.Distance(pickup.transform.position, VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position)).ToArray<VRC_Pickup>();
					goto IL_0117;
				}
				catch (Exception ex)
				{
					MelonLogger.Msg(((ex != null) ? ex.ToString() : null) + " \n\n Due to this error the pickups have been ordered by A-Z as default.");
					array = array.OrderBy((VRC_Pickup pickup) => pickup.name).ToArray<VRC_Pickup>();
					goto IL_0117;
				}
			}
			array = array.OrderBy((VRC_Pickup pickup) => pickup.name).ToArray<VRC_Pickup>();
			IL_0117:
			VRC_Pickup[] array2 = array;
			for (int i = 0; i < array2.Length; i++)
			{
				VRC_Pickup Pickup = array2[i];
				string text;
				if (ItemIndex.OrderDistance)
				{
					text = Pickup.name + " - " + Vector3.Distance(VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position, Pickup.gameObject.transform.position).ToString();
				}
				else
				{
					text = Pickup.gameObject.name;
				}
				ItemIndex.Catagory1.AddButton(text, "Opens Pickup Options Menu", delegate
				{
					if (ItemIndex.Catagory2 != null)
					{
						ItemIndex.Catagory2.Active = false;
					}
					ItemIndex.IndexPage2.AddCategory(string.Concat(new string[]
					{
						"|ItemIndex| - ",
						Pickup.gameObject.name,
						" (",
						ItemIndex.catvalue2.ToString(),
						")"
					}));
					ItemIndex.Catagory2 = ItemIndex.IndexPage2.GetCategory(string.Concat(new string[]
					{
						"|ItemIndex| - ",
						Pickup.gameObject.name,
						" (",
						ItemIndex.catvalue2.ToString(),
						")"
					}));
					ItemIndex.catvalue2++;
					ItemIndex.Catagory2.AddButton("Tp 2 Self", "Teleports to yourself", delegate
					{
						if (Networking.GetOwner(Pickup.gameObject) != Networking.LocalPlayer)
						{
							Networking.SetOwner(Networking.LocalPlayer, Pickup.gameObject);
						}
						Pickup.gameObject.transform.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.2f, 0f);
					}, null, "#ffffff");
					ItemIndex.Catagory2.AddButton("Toggle Butter WIP", "SLIPPERY FUCKING OBJECT", delegate
					{
					}, null, "#ffffff");
					ItemIndex.Catagory2.AddButton("Drop", "Force someone to drop it", delegate
					{
						if (Networking.GetOwner(Pickup.gameObject) != Networking.LocalPlayer)
						{
							Networking.SetOwner(Networking.LocalPlayer, Pickup.gameObject);
						}
					}, null, "#ffffff");
					ItemIndex.Catagory2.AddButton("Vanish", "poof", delegate
					{
						if (Networking.GetOwner(Pickup.gameObject) != Networking.LocalPlayer)
						{
							Networking.SetOwner(Networking.LocalPlayer, Pickup.gameObject);
						}
						Pickup.transform.position = new Vector3(0f, 999800f, 0f);
					}, null, "#ffffff");
					ItemIndex.IndexPage2.Open();
				}, null, "#ffffff");
			}
		}

		// Token: 0x040000C4 RID: 196
		private static ReMenuButton Filter1;

		// Token: 0x040000C5 RID: 197
		private static ReMenuButton Filter2;

		// Token: 0x040000C6 RID: 198
		private static ReMenuButton ReloadIndex;

		// Token: 0x040000C7 RID: 199
		private static ReMenuPage MainPageIndex;

		// Token: 0x040000C8 RID: 200
		private static ReCategoryPage IndexPage;

		// Token: 0x040000C9 RID: 201
		private static ReCategoryPage IndexPage2;

		// Token: 0x040000CA RID: 202
		private static ReMenuCategory Catagory1;

		// Token: 0x040000CB RID: 203
		private static ReMenuCategory Catagory2;

		// Token: 0x040000CC RID: 204
		public static bool FirstLoad = true;

		// Token: 0x040000CD RID: 205
		private static bool OrderDistance = false;

		// Token: 0x040000CE RID: 206
		private static int catvalue = 0;

		// Token: 0x040000CF RID: 207
		private static int catvalue2 = 0;
	}
}
