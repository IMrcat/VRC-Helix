using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using MelonLoader;
using ReMod.Core.Managers;
using ReMod.Core.UI.QuickMenu;
using Values;
using VRC.Core;
using VRC.SDKBase;

namespace Exploits
{
	// Token: 0x0200002F RID: 47
	[NullableContext(1)]
	[Nullable(0)]
	internal class InstanceHistroy
	{
		// Token: 0x060000C9 RID: 201 RVA: 0x00007A5C File Offset: 0x00005C5C
		public static void MakeMenu(ref UiManager MainPage)
		{
			InstanceHistroy.MainPageIndex = MainPage.QMMenu.AddCategoryPage("History", "Udon Indexer", null, "#ffffff");
			InstanceHistroy.Catagory1 = InstanceHistroy.MainPageIndex.AddCategory("Section1");
			InstanceHistroy.Filter1 = InstanceHistroy.Catagory1.AddButton("<color=red>Clear</color>", "Clear Histroy", delegate
			{
				Directory.CreateDirectory(Path.GetDirectoryName(InstanceHistroy.PathToInstanceHistory));
				using (new FileStream(InstanceHistroy.PathToInstanceHistory, FileMode.Truncate))
				{
				}
				InstanceHistroy.LoadInstances();
			}, null, "#ffffff");
			InstanceHistroy.Catagory1.AddSpacer(null);
			InstanceHistroy.Catagory1.AddSpacer(null);
			InstanceHistroy.IndexPage = InstanceHistroy.Catagory1.AddCategoryPage("PrevButton", "previous Page", null, "#ffffff");
		}

		// Token: 0x060000CA RID: 202 RVA: 0x00007B14 File Offset: 0x00005D14
		private static void LoadInstances()
		{
			if (InstanceHistroy.Catagory2 != null)
			{
				InstanceHistroy.Catagory2.Active = false;
			}
			InstanceHistroy.MainPageIndex.AddCategory("|Instance History| (" + InstanceHistroy.catvalue.ToString() + ")");
			InstanceHistroy.Catagory2 = InstanceHistroy.MainPageIndex.GetCategory("|Instance History| (" + InstanceHistroy.catvalue.ToString() + ")");
			InstanceHistroy.catvalue++;
			List<Tuple<string, string, DateTime>> list = InstanceHistroy.ReadInstanceHistory();
			list.Sort((Tuple<string, string, DateTime> x, Tuple<string, string, DateTime> y) => DateTime.Compare(y.Item3, x.Item3));
			foreach (Tuple<string, string, DateTime> tuple in list)
			{
				string Id = tuple.Item1;
				string Name = tuple.Item2;
				string DateNTimetostring = tuple.Item3.ToString("dd/MM HH:mm");
				if (Id != null && Name != null && DateNTimetostring != null)
				{
					InstanceHistroy.Catagory2.AddButton(Name + "\n" + DateNTimetostring, DateNTimetostring, delegate
					{
						if (InstanceHistroy.cat3 != null)
						{
							InstanceHistroy.cat3.Active = false;
						}
						InstanceHistroy.IndexPage.AddCategory(string.Concat(new string[]
						{
							Name,
							" - Joined at ",
							DateNTimetostring,
							" (",
							InstanceHistroy.catvalue3.ToString(),
							")"
						}));
						InstanceHistroy.cat3 = InstanceHistroy.IndexPage.GetCategory(string.Concat(new string[]
						{
							Name,
							" - Joined at ",
							DateNTimetostring,
							" (",
							InstanceHistroy.catvalue3.ToString(),
							")"
						}));
						InstanceHistroy.catvalue3++;
						InstanceHistroy.cat3.AddButton("Join", "joins world", delegate
						{
							Networking.GoToRoom(Id);
						}, null, "#ffffff");
						InstanceHistroy.IndexPage.Open();
					}, null, "#ffffff");
				}
			}
		}

		// Token: 0x060000CB RID: 203 RVA: 0x00007C7C File Offset: 0x00005E7C
		public static IEnumerator SaveInstanceToHistory()
		{
			while (RoomManager.field_Private_Static_ApiWorldInstance_1 == null)
			{
				yield return null;
			}
			ApiWorldInstance field_Private_Static_ApiWorldInstance_ = RoomManager.field_Private_Static_ApiWorldInstance_1;
			LocalUser.Loadedin = true;
			try
			{
				Directory.CreateDirectory(Path.GetDirectoryName(InstanceHistroy.PathToInstanceHistory));
				using (StreamWriter streamWriter = new StreamWriter(InstanceHistroy.PathToInstanceHistory, true))
				{
					streamWriter.WriteLine(string.Format("{0},{1} {2},{3}", new object[]
					{
						field_Private_Static_ApiWorldInstance_.id,
						field_Private_Static_ApiWorldInstance_.world.name,
						field_Private_Static_ApiWorldInstance_.name,
						DateTime.Now
					}));
				}
				MelonLogger.Msg(string.Format("{0},{1} {2},{3}", new object[]
				{
					field_Private_Static_ApiWorldInstance_.id,
					field_Private_Static_ApiWorldInstance_.world.name,
					field_Private_Static_ApiWorldInstance_.name,
					DateTime.Now
				}));
			}
			catch (Exception ex)
			{
				string text = "Error with saving instance: ";
				Exception ex2 = ex;
				MelonLogger.Msg(text + ((ex2 != null) ? ex2.ToString() : null) + "\nPlease report this error to Eden");
			}
			InstanceHistroy.LoadInstances();
			yield break;
		}

		// Token: 0x060000CC RID: 204 RVA: 0x00007C84 File Offset: 0x00005E84
		public static List<Tuple<string, string, DateTime>> ReadInstanceHistory()
		{
			List<Tuple<string, string, DateTime>> list = new List<Tuple<string, string, DateTime>>();
			try
			{
				if (File.Exists(InstanceHistroy.PathToInstanceHistory))
				{
					using (StreamReader streamReader = new StreamReader(InstanceHistroy.PathToInstanceHistory))
					{
						string text;
						while ((text = streamReader.ReadLine()) != null)
						{
							string[] array = text.Split(new char[] { ',' });
							if (array.Length == 3)
							{
								string text2 = array[0];
								string text3 = array[1];
								DateTime dateTime;
								if (DateTime.TryParse(array[2], out dateTime))
								{
									list.Add(Tuple.Create<string, string, DateTime>(text2, text3, dateTime));
								}
								else
								{
									MelonLogger.Msg("Invalid date format in file.");
								}
							}
							else
							{
								MelonLogger.Msg("Invalid data format in file.");
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				string text4 = "Error in reading instance history: ";
				Exception ex2 = ex;
				MelonLogger.Msg(text4 + ((ex2 != null) ? ex2.ToString() : null) + "\nPlease report to Eden!");
			}
			return list;
		}

		// Token: 0x040000B3 RID: 179
		private static readonly string PathToInstanceHistory = Path.Combine(Environment.CurrentDirectory, "UserData", "HelixLite", "InstanceHistory.txt");

		// Token: 0x040000B4 RID: 180
		private static ReMenuButton Filter1;

		// Token: 0x040000B5 RID: 181
		private static ReMenuButton Filter2;

		// Token: 0x040000B6 RID: 182
		private static ReMenuButton ReloadIndex;

		// Token: 0x040000B7 RID: 183
		private static ReCategoryPage MainPageIndex;

		// Token: 0x040000B8 RID: 184
		private static ReCategoryPage IndexPage;

		// Token: 0x040000B9 RID: 185
		private static ReMenuCategory Catagory1;

		// Token: 0x040000BA RID: 186
		private static ReMenuCategory Catagory2;

		// Token: 0x040000BB RID: 187
		private static ReMenuCategory cat3;

		// Token: 0x040000BC RID: 188
		public static bool FirstLoad = true;

		// Token: 0x040000BD RID: 189
		private static bool OrderDistance = false;

		// Token: 0x040000BE RID: 190
		private static int catvalue = 0;

		// Token: 0x040000BF RID: 191
		private static int catvalue2 = 0;

		// Token: 0x040000C0 RID: 192
		private static int catvalue3 = 0;
	}
}
