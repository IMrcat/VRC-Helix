using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using MelonLoader;
using UnityEngine;
using VRC.SDKBase;

namespace Exploits
{
	// Token: 0x02000030 RID: 48
	[NullableContext(1)]
	[Nullable(0)]
	internal class ItemGravity
	{
		// Token: 0x060000CF RID: 207 RVA: 0x00007DAA File Offset: 0x00005FAA
		public static IEnumerator GravityIntensity()
		{
			float startTime = Time.time;
			Dictionary<VRC_Pickup, Rigidbody> PickupRigid = new Dictionary<VRC_Pickup, Rigidbody>();
			VRC_Pickup[] pickups = GeneralPickups.getpickups();
			if (pickups == null)
			{
				yield break;
			}
			foreach (VRC_Pickup vrc_Pickup in pickups)
			{
				if (!(vrc_Pickup == null))
				{
					Rigidbody component = vrc_Pickup.GetComponent<Rigidbody>();
					if (component != null)
					{
						PickupRigid.Add(vrc_Pickup, component);
					}
				}
			}
			MelonCoroutines.Start(ItemGravity.claimownershipsometimes());
			while (ItemGravity.GravityToggleBool)
			{
				using (Dictionary<VRC_Pickup, Rigidbody>.KeyCollection.Enumerator enumerator = PickupRigid.Keys.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						VRC_Pickup vrc_Pickup2 = enumerator.Current;
						if (!(vrc_Pickup2 == null))
						{
							Rigidbody rigidbody = PickupRigid[vrc_Pickup2];
							if (rigidbody != null)
							{
								rigidbody.useGravity = false;
								rigidbody.AddForce(Physics.gravity * ItemGravity.GravityIntensityValue, 5);
							}
						}
					}
					goto IL_012E;
				}
				goto IL_0117;
				IL_012E:
				if (Time.time >= startTime + ItemGravity.UpdateFrequency)
				{
					startTime = Time.time;
					continue;
				}
				IL_0117:
				yield return null;
				goto IL_012E;
			}
			if (ItemGravity.GravityToggleBool)
			{
				VRC_Pickup[] array2 = pickups;
				for (int j = 0; j < array2.Length; j++)
				{
					Rigidbody component2 = array2[j].GetComponent<Rigidbody>();
					if (component2 != null)
					{
						component2.useGravity = true;
					}
					while (Time.time < startTime + 0.23f)
					{
						yield return null;
					}
					startTime = Time.time;
				}
				array2 = null;
			}
			yield break;
		}

		// Token: 0x060000D0 RID: 208 RVA: 0x00007DB2 File Offset: 0x00005FB2
		public static IEnumerator ResetGravity()
		{
			float startTime = Time.time;
			ItemGravity.GravityIntensityValue = 1f;
			VRC_Pickup[] array = GeneralPickups.getpickups();
			VRC_Pickup[] array2 = array;
			for (int i = 0; i < array2.Length; i++)
			{
				Rigidbody component = array2[i].GetComponent<Rigidbody>();
				if (component != null)
				{
					component.useGravity = true;
				}
				while (Time.time < startTime + 0.001f)
				{
					yield return null;
				}
				startTime = Time.time;
			}
			array2 = null;
			yield break;
		}

		// Token: 0x060000D1 RID: 209 RVA: 0x00007DBA File Offset: 0x00005FBA
		public static IEnumerator claimownershipsometimes()
		{
			float startTime = Time.time;
			VRC_Pickup[] pickups = GeneralPickups.getpickups();
			while (ItemGravity.GravityToggleBool)
			{
				foreach (VRC_Pickup vrc_Pickup in pickups)
				{
					if (!(vrc_Pickup == null) && !(vrc_Pickup.gameObject == null))
					{
						if (!vrc_Pickup.IsHeld)
						{
							while (Time.time < startTime + 0.16f)
							{
								yield return null;
							}
							startTime = Time.time;
							if (!vrc_Pickup.IsHeld && !Networking.LocalPlayer.IsOwner(vrc_Pickup.gameObject))
							{
								Networking.LocalPlayer.TakeOwnership(vrc_Pickup.gameObject);
							}
						}
						vrc_Pickup = null;
					}
				}
				VRC_Pickup[] array = null;
				while (Time.time < startTime + 0.16f)
				{
					yield return null;
				}
				startTime = Time.time;
			}
			yield break;
		}

		// Token: 0x040000C1 RID: 193
		public static float GravityIntensityValue = 1f;

		// Token: 0x040000C2 RID: 194
		public static bool GravityToggleBool = false;

		// Token: 0x040000C3 RID: 195
		public static float UpdateFrequency = 0.02f;
	}
}
