using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using MelonLoader;
using Resources;
using UnityEngine;
using Values;
using VRC;

namespace Exploits
{
	// Token: 0x0200002C RID: 44
	[NullableContext(1)]
	[Nullable(0)]
	internal class ESP
	{
		// Token: 0x060000BA RID: 186 RVA: 0x00007584 File Offset: 0x00005784
		public static void CapsuleESP(Player player, bool State)
		{
			try
			{
				Transform transform = player.transform.Find("SelectRegion");
				HighlightsFXStandalone highlightsFXStandalone = HighlightsFX.field_Private_Static_HighlightsFX_0.gameObject.AddComponent<HighlightsFXStandalone>();
				Color color = (ConfigZone.NeonESPBool.Value ? new Color(255f, 255f, 253f) : VRCPlayer.field_Internal_Static_Color_2);
				int playerRank = others.GetPlayerRank(player);
				if (playerRank != -1)
				{
					if (ConfigZone.NeonESPBool.Value)
					{
						switch (playerRank)
						{
						case 1:
							color..ctor(113f, 196f, 201f);
							break;
						case 2:
							color..ctor(122f, 201f, 113f);
							break;
						case 3:
							color..ctor(255f, 0f, 179f);
							break;
						case 4:
							color..ctor(204f, 0f, 255f);
							break;
						case 5:
							color..ctor(255f, 47f, 0f);
							break;
						case 6:
							color..ctor(253f, 255f, 112f);
							break;
						}
					}
					else
					{
						Color color2;
						switch (playerRank)
						{
						case 1:
							color2 = new Color(0.392f, 0.584f, 0.929f);
							break;
						case 2:
							color2 = new Color(0.565f, 0.933f, 0.565f);
							break;
						case 3:
							color2 = new Color(1f, 0.792f, 0.365f);
							break;
						case 4:
							color2 = new Color(0.831f, 0.447f, 1f);
							break;
						case 5:
							color2 = new Color(1f, 0.459f, 0.459f);
							break;
						case 6:
							color2 = new Color(1f, 0.984f, 0f);
							break;
						default:
							color2 = new Color(0.96f, 0.96f, 0.96f);
							break;
						}
						color = color2;
						highlightsFXStandalone.blurDownsampleFactor = 1;
						highlightsFXStandalone.blurIterations = 2;
					}
				}
				highlightsFXStandalone.highlightColor = color;
				highlightsFXStandalone.blurSize = 0.2f;
				highlightsFXStandalone.renderTextureWidth = 2048;
				highlightsFXStandalone.renderTextureHeight = 1424;
				ESP.ListOfESP.Add(highlightsFXStandalone);
				highlightsFXStandalone.Render(transform.GetComponent<Renderer>(), State);
			}
			catch (Exception ex)
			{
				MelonLogger.Msg(ex);
			}
		}

		// Token: 0x060000BB RID: 187 RVA: 0x00007804 File Offset: 0x00005A04
		public static void CapsuleAll(bool state)
		{
			foreach (Player player in others.GetAllPlayers())
			{
				ESP.CapsuleESP(player, state);
			}
		}

		// Token: 0x060000BC RID: 188 RVA: 0x00007854 File Offset: 0x00005A54
		public static void destroyesp()
		{
			foreach (HighlightsFXStandalone highlightsFXStandalone in ESP.ListOfESP)
			{
				highlightsFXStandalone.enabled = false;
			}
			ESP.ListOfESP.Clear();
		}

		// Token: 0x060000BD RID: 189 RVA: 0x000078B0 File Offset: 0x00005AB0
		public static IEnumerator delayedstart(float delay, Player player, bool State)
		{
			float startTime = Time.time;
			while (Time.time < startTime + delay)
			{
				yield return null;
			}
			startTime = Time.time;
			if (player._vrcplayer != null)
			{
				ESP.CapsuleESP(player, State);
			}
			yield break;
		}

		// Token: 0x040000AE RID: 174
		public static List<HighlightsFXStandalone> ListOfESP = new List<HighlightsFXStandalone>();
	}
}
